[{"C:\\Users\\ociel\\Desktop\\practica_jueves_18\\abc_react\\src\\index.js":"1","C:\\Users\\ociel\\Desktop\\practica_jueves_18\\abc_react\\src\\serviceWorker.js":"2","C:\\Users\\ociel\\Desktop\\practica_jueves_18\\abc_react\\src\\App.js":"3"},{"size":471,"mtime":1587082062000,"results":"4","hashOfConfig":"5"},{"size":5086,"mtime":1587082062000,"results":"6","hashOfConfig":"5"},{"size":6710,"mtime":1587082062000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18bc4wa",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"C:\\Users\\ociel\\Desktop\\practica_jueves_18\\abc_react\\src\\index.js",[],"C:\\Users\\ociel\\Desktop\\practica_jueves_18\\abc_react\\src\\serviceWorker.js",[],"C:\\Users\\ociel\\Desktop\\practica_jueves_18\\abc_react\\src\\App.js",["15","16","17","18","19","20"],"import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n  Table,\n  Button,\n  Container,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  FormGroup,\n  ModalFooter,\n} from \"reactstrap\";\n\nconst data = [\n  { id: 1, personaje: \"Naruto\", anime: \"Naruto\" },\n  { id: 2, personaje: \"Goku\", anime: \"Dragon Ball\" },\n  { id: 3, personaje: \"Kenshin Himura\", anime: \"Rurouni Kenshin\" },\n  { id: 4, personaje: \"Monkey D. Luffy\", anime: \"One Piece\" },\n  { id: 5, personaje: \"Edward Elric\", anime: \"Fullmetal Alchemist: Brotherhood\"},\n  { id: 6, personaje: \"Seto Kaiba\", anime: \"Yu-Gi-Oh!\" },\n];\n\nclass App extends React.Component {\n  state = {\n    data: data,\n    modalActualizar: false,\n    modalInsertar: false,\n    form: {\n      id: \"\",\n      personaje: \"\",\n      anime: \"\",\n    },\n  };\n\n  mostrarModalActualizar = (dato) => {\n    this.setState({\n      form: dato,\n      modalActualizar: true,\n    });\n  };\n\n  cerrarModalActualizar = () => {\n    this.setState({ modalActualizar: false });\n  };\n\n  mostrarModalInsertar = () => {\n    this.setState({\n      modalInsertar: true,\n    });\n  };\n\n  cerrarModalInsertar = () => {\n    this.setState({ modalInsertar: false });\n  };\n\n  editar = (dato) => {\n    var contador = 0;\n    var arreglo = this.state.data;\n    arreglo.map((registro) => {\n      if (dato.id == registro.id) {\n        arreglo[contador].personaje = dato.personaje;\n        arreglo[contador].anime = dato.anime;\n      }\n      contador++;\n    });\n    this.setState({ data: arreglo, modalActualizar: false });\n  };\n\n  eliminar = (dato) => {\n    var opcion = window.confirm(\"Estás Seguro que deseas Eliminar el elemento \"+dato.id);\n    if (opcion == true) {\n      var contador = 0;\n      var arreglo = this.state.data;\n      arreglo.map((registro) => {\n        if (dato.id == registro.id) {\n          arreglo.splice(contador, 1);\n        }\n        contador++;\n      });\n      this.setState({ data: arreglo, modalActualizar: false });\n    }\n  };\n\n  insertar= ()=>{\n    var valorNuevo= {...this.state.form};\n    valorNuevo.id=this.state.data.length+1;\n    var lista= this.state.data;\n    lista.push(valorNuevo);\n    this.setState({ modalInsertar: false, data: lista });\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      form: {\n        ...this.state.form,\n        [e.target.name]: e.target.value,\n      },\n    });\n  };\n\n  render() {\n    \n    return (\n      <>\n        <Container>\n        <br />\n          <Button color=\"success\" onClick={()=>this.mostrarModalInsertar()}>Crear</Button>\n          <br />\n          <br />\n          <Table>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>Personaje</th>\n                <th>Anime</th>\n                <th>Acción</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {this.state.data.map((dato) => (\n                <tr key={dato.id}>\n                  <td>{dato.id}</td>\n                  <td>{dato.personaje}</td>\n                  <td>{dato.anime}</td>\n                  <td>\n                    <Button\n                      color=\"primary\"\n                      onClick={() => this.mostrarModalActualizar(dato)}\n                    >\n                      Editar\n                    </Button>{\" \"}\n                    <Button color=\"danger\" onClick={()=> this.eliminar(dato)}>Eliminar</Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Container>\n\n        <Modal isOpen={this.state.modalActualizar}>\n          <ModalHeader>\n           <div><h3>Editar Registro</h3></div>\n          </ModalHeader>\n\n          <ModalBody>\n            <FormGroup>\n              <label>\n               Id:\n              </label>\n            \n              <input\n                className=\"form-control\"\n                readOnly\n                type=\"text\"\n                value={this.state.form.id}\n              />\n            </FormGroup>\n            \n            <FormGroup>\n              <label>\n                Personaje: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"personaje\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.form.personaje}\n              />\n            </FormGroup>\n            \n            <FormGroup>\n              <label>\n                Anime: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"anime\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.form.anime}\n              />\n            </FormGroup>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button\n              color=\"primary\"\n              onClick={() => this.editar(this.state.form)}\n            >\n              Editar\n            </Button>\n            <Button\n              color=\"danger\"\n              onClick={() => this.cerrarModalActualizar()}\n            >\n              Cancelar\n            </Button>\n          </ModalFooter>\n        </Modal>\n\n\n\n        <Modal isOpen={this.state.modalInsertar}>\n          <ModalHeader>\n           <div><h3>Insertar Personaje</h3></div>\n          </ModalHeader>\n\n          <ModalBody>\n            <FormGroup>\n              <label>\n                Id: \n              </label>\n              \n              <input\n                className=\"form-control\"\n                readOnly\n                type=\"text\"\n                value={this.state.data.length+1}\n              />\n            </FormGroup>\n            \n            <FormGroup>\n              <label>\n                Personaje: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"personaje\"\n                type=\"text\"\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n            \n            <FormGroup>\n              <label>\n                Anime: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"anime\"\n                type=\"text\"\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button\n              color=\"primary\"\n              onClick={() => this.insertar()}\n            >\n              Insertar\n            </Button>\n            <Button\n              className=\"btn btn-danger\"\n              onClick={() => this.cerrarModalInsertar()}\n            >\n              Cancelar\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  }\n}\nexport default App;\n",{"ruleId":"21","severity":1,"message":"22","line":2,"column":8,"nodeType":"23","messageId":"24","endLine":2,"endColumn":12},{"ruleId":"25","severity":1,"message":"26","line":61,"column":28,"nodeType":"27","messageId":"28","endLine":61,"endColumn":30},{"ruleId":"29","severity":1,"message":"30","line":62,"column":19,"nodeType":"31","messageId":"32","endLine":62,"endColumn":21},{"ruleId":"29","severity":1,"message":"30","line":73,"column":16,"nodeType":"31","messageId":"32","endLine":73,"endColumn":18},{"ruleId":"25","severity":1,"message":"26","line":76,"column":30,"nodeType":"27","messageId":"28","endLine":76,"endColumn":32},{"ruleId":"29","severity":1,"message":"30","line":77,"column":21,"nodeType":"31","messageId":"32","endLine":77,"endColumn":23},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]